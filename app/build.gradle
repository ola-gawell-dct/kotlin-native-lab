plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}
repositories {
    google()
    mavenCentral()
    jcenter()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'com.example.kotlinnativelab'
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName '0.1'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.recyclerview:recyclerview:$recycleview_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {

    targets {
        fromPreset(presets.android, 'android')
        fromPreset(presets.iosX64, 'ios') {
            binaries {
                framework {
                    baseName = "app"
                }
            }
        }
    }

    sourceSets {
        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                    implementation "io.ktor:ktor-client-core:$ktor_version"
                    implementation "io.ktor:ktor-client-json:$ktor_version"
                    implementation "io.ktor:ktor-client-serialization:$ktor_version"

                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"

                    implementation "org.kodein.di:kodein-di-erased:$kodein_version"
                }
            }
            commonTest {
                dependencies {
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')
                }
            }
            androidMain {
                dependencies {
                    implementation kotlin('stdlib')
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"

                    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                    implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
                    implementation "io.ktor:ktor-client-android:$ktor_version"
                }
            }
            androidTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-junit')
                }
            }
            iosMain {
                dependencies {
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlinx_serialization_version"

                    implementation "io.ktor:ktor-client-ios-iosx64:$ktor_version"
                    implementation "io.ktor:ktor-client-ios:$ktor_version"
                    implementation "io.ktor:ktor-client-core-native:$ktor_version"
                    implementation "io.ktor:ktor-client-json-native:$ktor_version"
                    implementation "io.ktor:ktor-client-serialization-iosx64:$ktor_version"
                }
            }
            iosTest {
            }
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        def frameworkName = kotlin.targets."$target".binaries.getFramework(buildType).baseName

        copy {
            from srcFile.parent
            into targetDir
            include "${frameworkName}.framework/**"
            include "${frameworkName}.framework.dSYM"
        }
    }
}